import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2' // Allure plugin
}

group 'com.btl.test'
version '1.0-SNAPSHOT'
sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}


repositories {
    mavenCentral()
}

dependencies {
    // REST Assured
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // Jackson for JSON parsing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    //  Allure
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testImplementation 'io.qameta.allure:allure-model:2.29.1'
}


test {
    useJUnitPlatform()


        // Prefer project property if provided
        if (project.hasProperty('enablePayloadLogging')) {
            systemProperty 'enablePayloadLogging', project.getProperty('enablePayloadLogging')
        }

        // Fallback to environment variable (useful for CI environments)
        def envLogging = System.getenv("ENABLE_PAYLOAD_LOGGING")
        if (envLogging != null) {
            systemProperty 'enablePayloadLogging', envLogging
        }



    // Get project property or fallback
    def envProp = project.hasProperty('env') ? project.getProperty('env') : 'dev'
    systemProperty 'env', envProp

    // Generate a timestamp string
    def timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date())

    // Enable and configure reports the RIGHT way
    reports {
        html.required.set(true)
        junitXml.required.set(true)

        html.outputLocation.set(file("$buildDir/reports/tests/test_$timestamp"))
        junitXml.outputLocation.set(file("$buildDir/test-results/test_$timestamp"))
    }

    //include '**/ApiSuiteTest.*'

    testLogging {
        events "failed", "skipped", "passed"
        exceptionFormat "short"
        showStandardStreams = true
    }

    // Print clickable link after tests
    doLast {
        println "\nðŸ“„ Test HTML report generated at:"
        println "file://$buildDir/reports/tests/test_$timestamp/index.html\n"
    }

    forkEvery = 0
}

tasks.javadoc {
    source = sourceSets.test.allJava
    classpath += configurations.testRuntimeClasspath
    destinationDir = file("$buildDir/docs/javadoc")
    failOnError = false
    options.memberLevel = JavadocMemberLevel.PROTECTED
}

allure {
    version = '2.29.0' // Matches allure-junit5 version line
    autoconfigure = true
    aspectjweaver = true
}
