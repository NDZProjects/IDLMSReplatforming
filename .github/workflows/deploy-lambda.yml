name: Deploy  Lambda

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: 'Environment to deploy (dev/staging/prod)'
        required: true
        default: 'dev'

jobs:
  deploy-license-api:
    if: github.ref == 'refs/heads/feature/btl-52'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-east-1
      ENV: ${{ github.event.inputs.ENV }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: ./src
        run: npm ci

      - name: Build NestJS app
        working-directory: ./src
        run: npm run build

      - name: Package Lambda as ZIP
        working-directory: ./src
        run: |
          npm prune --production
          zip -r ../infra/lambda/backend-api.zip dist node_modules package.json -x "**/*.map" "**/*.d.ts" "**/test/**"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Lambda Init & Apply
        working-directory: ./infra/lambda
        run: |
          terraform init
          terraform apply -auto-approve -var-file=${{ env.ENV }}.tfvars

      - name: Terraform EC2 Init & Apply
        working-directory: ./infra/ec2
        run: |
          terraform init
          terraform apply -auto-approve -var-file=${{ env.ENV }}.tfvars

      - name: Get EC2 Name Tag and S3 Bucket from Terraform
        id: get-vars
        working-directory: ./infra/ec2
        run: |
          echo "ec2_name=$(terraform output -raw ec2_instance_name)" >> $GITHUB_OUTPUT
          echo "sql_backup_bucket=$(terraform output -raw sql_backup_bucket)" >> $GITHUB_OUTPUT
          echo "EC2_NAME_TAG=$(terraform output -raw ec2_instance_name)" >> $GITHUB_ENV
          echo "SQL_BACKUP_BUCKET=$(terraform output -raw sql_backup_bucket)" >> $GITHUB_ENV

      - name: Check & Install AWS CLI if not present
        run: |
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      - name: Wait for EC2 to register in SSM
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$EC2_NAME_TAG" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text --region $AWS_REGION)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          for i in {1..10}; do
            CHECK=$(aws ssm describe-instance-information \
              --filters "Key=InstanceIds,Values=$INSTANCE_ID" \
              --region $AWS_REGION \
              --query "InstanceInformationList[0].InstanceId" \
              --output text 2>/dev/null)

            if [[ "$CHECK" == "$INSTANCE_ID" ]]; then
              echo "EC2 registered with SSM."
              exit 0
            fi

            echo "Waiting for SSM... attempt $i"
            sleep 15
          done

          echo "EC2 instance not registered in SSM."
          exit 1

      - name: Install PostgreSQL 15 via SSM
        run: |
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Install PostgreSQL 15" \
            --parameters 'commands=[ ... your commands here ... ]' \
            --region $AWS_REGION \
            --output text

      - name: Create DB & Import SQL Backup via SSM
        run: |
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Create DB and Import SQL Backup" \
            --parameters 'commands=[ ... your restore logic ... ]' \
            --region $AWS_REGION \
            --output text

      - name: Terraform REST API Init & Apply
        working-directory: ./infra/api
        run: |
          terraform init
          terraform apply -auto-approve -var-file=${{ env.ENV }}.tfvars
