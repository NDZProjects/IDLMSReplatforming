name: Deploy License API

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: 'Environment to deploy (dev/staging/prod)'
        required: true
        default: 'staging'
      ROLLBACK_TAG:
        description: 'Optional: Previous build tag (e.g., 2025.06.30.02). If left blank, deploys latest.'
        required: false

env:
  AWS_REGION: us-east-1
  TF_BUCKET: my-terraform-state-bckt43
  ECR_REPO: license-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ENV }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GITHUB_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Apply VPC
        run: |
          cd infra/vpc
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/vpc/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply NLB
        run: |
          cd infra/nlb
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/nlb/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply API Gateway
        run: |
          cd infra/http-api
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/http-api/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply CloudWatch
        run: |
          cd infra/cloudwatch
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/cloudwatch/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ========== ECR Build + Push + Deploy ==========

      - name: Get AWS Account ID
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Decide Image URI
        id: decide-image
        run: |
          if [ -z "${{ github.event.inputs.ROLLBACK_TAG }}" ]; then
            DATE_TAG=$(date +'%Y.%m.%d.%H%M')
            GIT_TAG=$(git rev-parse --short HEAD)
            BUILD_TAG="${DATE_TAG}-${GIT_TAG}"
            IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${BUILD_TAG}"

            echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
            echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
            echo "should_build_image=true" >> $GITHUB_ENV
          else
            IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${{ github.event.inputs.ROLLBACK_TAG }}"
            echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
            echo "should_build_image=false" >> $GITHUB_ENV
          fi

      - name: Log in to Amazon ECR
        if: env.should_build_image == 'true'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image to ECR
        if: env.should_build_image == 'true'
        run: |
          docker build -t $BUILD_TAG -f docker/Dockerfile src
          docker tag $BUILD_TAG $IMAGE_URI
          docker push $IMAGE_URI

      - name: Deploy to EC2 via SSM
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Backend API IDLMS-${{ github.event.inputs.ENV }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)

          echo "Deploying to instance: $INSTANCE_ID"

          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Docker image from ECR using docker-compose" \
            --parameters '{"commands":["#!/bin/bash","set -e","if ! command -v aws &> /dev/null; then curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip && unzip awscliv2.zip && ./aws/install -i /usr/local/aws-cli -b /usr/local/bin -u; fi","if ! command -v docker &> /dev/null; then apt update && apt install -y docker.io docker-compose && systemctl enable docker && systemctl start docker; fi","aws ssm get-parameter --name \"/idlms/env/shared\" --with-decryption --query \"Parameter.Value\" --output text > /home/ubuntu/.env","aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com","docker-compose --env-file /home/ubuntu/.env -f /home/ubuntu/docker-compose.yml down || true","docker-compose --env-file /home/ubuntu/.env -f /home/ubuntu/docker-compose.yml up -d"]}' \
            --timeout-seconds 600 \
            --region $AWS_REGION \
            --output text
