name: Build and Deploy License API

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - prod

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      run_infra: ${{ steps.filter.outputs.infra }}
      run_build: ${{ steps.filter.outputs.build }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Filter Changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            infra:
              - 'infra/**'
            build:
              - 'docker/**'
              - 'docker-compose.yml'
              - 'app/**'

  deploy:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.run_infra == 'true' || needs.detect-changes.outputs.run_build == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    env:
      AWS_REGION: us-east-1
      TF_BUCKET: my-terraform-state-bckt43
      BACKUP_BUCKET: idlms-website-built-artifact
      ENV: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ================== Terraform: VPC ==================
      - name: Terraform Apply VPC
        if: ${{ needs.detect-changes.outputs.run_infra == 'true' }}
        run: |
          cd infra/vpc
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${ENV}/vpc/terraform.tfstate"
          terraform plan -var-file="${ENV}.tfvars"
          terraform apply -auto-approve -var-file="${ENV}.tfvars"

      # ================== Terraform: NLB ==================
      - name: Terraform Apply NLB
        if: ${{ needs.detect-changes.outputs.run_infra == 'true' }}
        run: |
          cd infra/nlb
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${ENV}/nlb/terraform.tfstate"
          terraform plan -var-file="${ENV}.tfvars"
          terraform apply -auto-approve -var-file="${ENV}.tfvars"

      # ================== Terraform: HTTP API ==================
      - name: Terraform Apply HTTP API
        if: ${{ needs.detect-changes.outputs.run_infra == 'true' }}
        run: |
          cd infra/http-api
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${ENV}/http-api/terraform.tfstate"
          terraform plan -var-file="${ENV}.tfvars"
          terraform apply -auto-approve -var-file="${ENV}.tfvars"

      # ================== Terraform: CloudWatch ==================
      - name: Terraform Apply CloudWatch
        if: ${{ needs.detect-changes.outputs.run_infra == 'true' }}
        run: |
          cd infra/cloudwatch
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${ENV}/cloudwatch/terraform.tfstate"
          terraform plan -var-file="${ENV}.tfvars"
          terraform apply -auto-approve -var-file="${ENV}.tfvars"

      # ================== Docker Build ==================
      - name: Generate Docker Build Tag
        run: echo "BUILD_TAG=license-api-$(date +'%d%m%Y%H%M%S')" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build -t $BUILD_TAG -f docker/Dockerfile src
          mkdir -p docker/output
          docker save $BUILD_TAG | gzip > docker/output/$BUILD_TAG.tar.gz

      - name: Upload Image to S3
        run: |
          aws s3 cp docker/output/$BUILD_TAG.tar.gz s3://${{ env.BACKUP_BUCKET }}/docker-images/$ENV/$BUILD_TAG.tar.gz

      # ================== EC2 Deployment via SSM ==================
      - name: Deploy artifact using SSM
  run: |
    INSTANCE_ID=$(aws ec2 describe-instances \
      --filters "Name=tag:Name,Values=Backend API IDLMS-${ENV}" "Name=instance-state-name,Values=running" \
      --query "Reservations[].Instances[].InstanceId" \
      --output text)

    echo "Deploying to instance: $INSTANCE_ID"

    aws ssm send-command \
      --instance-ids "$INSTANCE_ID" \
      --document-name "AWS-RunShellScript" \
      --comment "Deploy Docker image from S3 and restart container" \
      --parameters 'commands=[
        "set -e",
        "if ! command -v docker &> /dev/null; then apt update && apt install -y docker.io docker-compose && systemctl enable docker && systemctl start docker; fi",
        "mkdir -p /home/ubuntu/backup",
        "[ -f /home/ubuntu/app.tar ] && cp /home/ubuntu/app.tar /home/ubuntu/backup/last-known-good.tar || true",
        "aws s3 cp s3://${BACKUP_BUCKET}/docker-images/${ENV}/${BUILD_TAG}.tar.gz /home/ubuntu/app.tar.gz",
        "gunzip -f /home/ubuntu/app.tar.gz",
        "docker load < /home/ubuntu/app.tar",
        "docker-compose down || true",
        "docker-compose up -d || (echo 'Deployment failed. Rolling back...' && docker load < /home/ubuntu/backup/last-known-good.tar && docker-compose up -d)"
      ]' \
      --timeout-seconds 600 \
      --output text

